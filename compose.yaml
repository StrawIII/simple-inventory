services:
  backend:
    build: backend
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      - JWT_KEY=${JWT_KEY}
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8000/api/v1/health"
        ]
      interval: ${INTERVAL}
      timeout: ${TIMEOUT}
      retries: ${RETRIES}
    depends_on:
      - postgres
      - minio
  frontend:
    build: frontend
    restart: always
    depends_on:
      - backend
  postgres:
    image: postgres:16
    restart: always
    ports:
      - 5432:5432
    # volumes:
    #   - ${POSTGRES_DATA}:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: ${INTERVAL}
      timeout: ${TIMEOUT}
      retries: ${RETRIES}
  minio:
    image: minio/minio:RELEASE.2024-07-04T14-25-45Z-cpuv1
    restart: always
    ports:
      - 9000:9000
      - 9001:9001
    # volumes:
    #   - ${MINIO_DATA}:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-I",
          "http://localhost:9000/minio/health/live"
        ]
      interval: ${INTERVAL}
      timeout: ${TIMEOUT}
      retries: ${RETRIES}
    command: server /data --console-address ":9001"
  nginx:
    image: nginx:1.27
    restart: always
    ports:
      - 80:80
    volumes:
      - nginx.conf:/etc/nginx/conf.d/default.conf
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: ${INTERVAL}
      timeout: ${TIMEOUT}
      retries: ${RETRIES}
    depends_on:
        condition: service_started
      backend:
        condition: service_healthy
      frontend:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
